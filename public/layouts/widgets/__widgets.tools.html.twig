{# --- Recognition -- #}
{% macro recognition(recognitionOptions) %}
    <script> document.addEventListener('DOMContentLoaded', function() { var toggleButton = document.getElementById('{{ recognitionOptions.button is defined and recognitionOptions.button ? recognitionOptions.button }}'); var transcriptionText = document.getElementById('{{ recognitionOptions.field is defined and recognitionOptions.field ? recognitionOptions.field }}');if ('webkitSpeechRecognition' in window) { var recognition = new webkitSpeechRecognition(); var defaultLanguage = window.navigator.language; recognition.lang = defaultLanguage; recognition.continuous = true; recognition.interimResults = true; var isRecording = false; toggleButton.addEventListener('click', function() { if (isRecording) { recognition.stop(); } else { recognition.start(); } }); recognition.onresult = function(event) { var interim_transcript = ''; var final_transcript = ''; for (var i = 0; i < event.results.length; ++i) { if (event.results[i].isFinal) { final_transcript += event.results[i][0].transcript; } else {  interim_transcript += event.results[i][0].transcript; } } transcriptionText.value = final_transcript + interim_transcript; }; recognition.onerror = function(event) { console.error("Speech recognition error:", event.error); }; recognition.onstart = function() { toggleButton.innerHTML = '<i class="{{ recognitionOptions.muteIcon | default('bi bi-mic-mute') }}"></i>'; isRecording = true; toggleButton.classList.add('recording'); }; recognition.onend = function() { toggleButton.innerHTML = '<i class="{{ recognitionOptions.muteIcon | default('bi bi-mic') }}"></i>'; isRecording = false; toggleButton.classList.remove('recording'); };} else { console.error("The SpeechRecognition API is not supported by your browser."); toggleButton.disabled = true; }}); </script>
{% endmacro %}
{# --- End Recognition -- #}

{# ----- Copy content ----- #}
{% macro copy(copyOptions) %}
    <script> async function copyContent() { var textField = document.getElementById("{{ copyOptions.content is defined and copyOptions.content ? copyOptions.content }}"); var copyButton = document.getElementById("{{ copyOptions.button is defined and copyOptions.button ? copyOptions.button }}"); if (!textField) { console.error("The textToCopy element was not found."); return; } if (!copyButton) { console.error("The copyButton element was not found."); return; } try { await navigator.clipboard.writeText(textField.value); {% if copyOptions.iconFinal is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconFinal }}'></i> {{ copyOptions.final }}"; {% else %} copyButton.textContent = "{{ copyOptions.final | default('Copied!') }}"; {% endif %} setTimeout(function() { {% if copyOptions.iconInit is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconInit }}'></i> {{ copyOptions.init }}"; {% else %}  copyButton.textContent = "{{ copyOptions.init | default('Copy text') }}"; {% endif %} }, 2000); } catch (err) { console.error("Failed to copy text: ", err); copyButton.textContent = "Failed to copy text."; setTimeout(function() { {% if copyOptions.iconInit is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconInit }}'></i> {{ copyOptions.init }}"; {% else %} copyButton.textContent = "{{ copyOptions.init | default('Copy text') }}"; {% endif %}  }, 2000); } } </script>
{% endmacro %}
{# ----- End Copy content ----- #}

{# --- Clock Field -- #}
{% macro clock(options) %}
    <div class="digital-clock"><div class="week">{% for day in options.days %}<div>{{ day }}</div>{% endfor %}</div><div class="time"><div class="hour">00</div><div class="dot">:</div><div class="min">00</div><div class="dot">:</div><div class="sec">00</div></div><div class="date"></div></div><script>function updateClock() {const now = new Date();const hours = now.getHours().toString().padStart(2, '0');const minutes = now.getMinutes().toString().padStart(2, '0');const seconds = now.getSeconds().toString().padStart(2, '0');const day = now.getDay();const days = {{ options.days | json_encode | raw }};document.querySelectorAll('.week div').forEach((el, index) => {el.textContent = days[index];el.classList.toggle('active', index === day);});const lang = '{{ options.lang }}' || 'en-GB';const options = { day: 'numeric', month: 'long', year: 'numeric' };const formattedDate = now.toLocaleDateString(lang, options);document.querySelector('.hour').textContent = hours;document.querySelector('.min').textContent = minutes;document.querySelector('.sec').textContent = seconds;document.querySelector('.date').textContent = formattedDate;}updateClock();setInterval(updateClock, 1000);</script>
{% endmacro %}
{# --- End Clock Field -- #}

{# --- Calendar Field -- #}
{% macro calendar(options) %}
    <div id="calendar"></div><script>function generateCalendar(monthOffset = 0) {const calendar = document.getElementById('calendar');const now = new Date();const month = (now.getMonth() + monthOffset) % 12;const year = now.getFullYear() + Math.floor((now.getMonth() + monthOffset) / 12);const firstDay = new Date(year, month, 1).getDay();const lastDate = new Date(year, month + 1, 0).getDate();const lang = '{{ options.lang }}' || 'en';const monthNamesArray = [];for (let i = 0; i < 12; i++) {const date = new Date(year, i, 1);monthNamesArray.push(new Intl.DateTimeFormat(lang, { month: 'long' }).format(date).toUpperCase());}const dayNamesArray = [];for (let i = 0; i < 7; i++) {const date = new Date(year, 0, i + 3);dayNamesArray.push(new Intl.DateTimeFormat(lang, { weekday: 'short' }).format(date).toUpperCase());}let calendarHTML = `<div class="calendar-header"><button onclick="generateCalendar(${monthOffset - 1})"><i class="bi bi-arrow-left"></i></button><span>${monthNamesArray[month]} ${year}</span><button onclick="generateCalendar(${monthOffset + 1})"><i class="bi bi-arrow-right"></i></button></div>`;calendarHTML += '<div class="calendar-body">';dayNamesArray.forEach(day => {calendarHTML += `<div class="calendar-day-name">${day}</div>`;});for (let i = 0; i < firstDay; i++) {calendarHTML += '<div class="calendar-day empty"></div>';}for (let date = 1; date <= lastDate; date++) {const isToday = date === now.getDate() && month === now.getMonth() && year === now.getFullYear();const todayClass = isToday ? 'today' : '';calendarHTML += `<div class="calendar-day ${todayClass}">${date}</div>`;}calendarHTML += '</div>';calendar.innerHTML = calendarHTML;}document.addEventListener('DOMContentLoaded', () => generateCalendar());</script>
{% endmacro %}
{# --- End Calendar Field -- #}

{# --- Progress Field -- #}
{% macro progressMeter(options) %}
    <div class="gauge-container"><div class="gauge" id="gauge" data-progress="{{ options.indicator }}"><span id="percentage">0%</span></div></div>
{% endmacro %}
{# --- End Progress Field -- #}