{# --- Recognition -- #}
{% macro recognition(recognitionOptions) %}
    <script> document.addEventListener('DOMContentLoaded', function() { var toggleButton = document.getElementById('{{ recognitionOptions.button is defined and recognitionOptions.button ? recognitionOptions.button }}'); var transcriptionText = document.getElementById('{{ recognitionOptions.field is defined and recognitionOptions.field ? recognitionOptions.field }}');if ('webkitSpeechRecognition' in window) { var recognition = new webkitSpeechRecognition(); var defaultLanguage = window.navigator.language; recognition.lang = defaultLanguage; recognition.continuous = true; recognition.interimResults = true; var isRecording = false; toggleButton.addEventListener('click', function() { if (isRecording) { recognition.stop(); } else { recognition.start(); } }); recognition.onresult = function(event) { var interim_transcript = ''; var final_transcript = ''; for (var i = 0; i < event.results.length; ++i) { if (event.results[i].isFinal) { final_transcript += event.results[i][0].transcript; } else {  interim_transcript += event.results[i][0].transcript; } } transcriptionText.value = final_transcript + interim_transcript; }; recognition.onerror = function(event) { console.error("Speech recognition error:", event.error); }; recognition.onstart = function() { toggleButton.innerHTML = '<i class="{{ recognitionOptions.muteIcon | default('bi bi-mic-mute') }}"></i>'; isRecording = true; toggleButton.classList.add('recording'); }; recognition.onend = function() { toggleButton.innerHTML = '<i class="{{ recognitionOptions.muteIcon | default('bi bi-mic') }}"></i>'; isRecording = false; toggleButton.classList.remove('recording'); };} else { console.error("The SpeechRecognition API is not supported by your browser."); toggleButton.disabled = true; }}); </script>
{% endmacro %}
{# --- End Recognition -- #}

{# ----- Copy content ----- #}
{% macro copy(copyOptions) %}
    <script> async function copyContent() { var textField = document.getElementById("{{ copyOptions.content is defined and copyOptions.content ? copyOptions.content }}"); var copyButton = document.getElementById("{{ copyOptions.button is defined and copyOptions.button ? copyOptions.button }}"); if (!textField) { console.error("The textToCopy element was not found."); return; } if (!copyButton) { console.error("The copyButton element was not found."); return; } try { await navigator.clipboard.writeText(textField.value); {% if copyOptions.iconFinal is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconFinal }}'></i> {{ copyOptions.final }}"; {% else %} copyButton.textContent = "{{ copyOptions.final | default('Copied!') }}"; {% endif %} setTimeout(function() { {% if copyOptions.iconInit is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconInit }}'></i> {{ copyOptions.init }}"; {% else %}  copyButton.textContent = "{{ copyOptions.init | default('Copy text') }}"; {% endif %} }, 2000); } catch (err) { console.error("Failed to copy text: ", err); copyButton.textContent = "Failed to copy text."; setTimeout(function() { {% if copyOptions.iconInit is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconInit }}'></i> {{ copyOptions.init }}"; {% else %} copyButton.textContent = "{{ copyOptions.init | default('Copy text') }}"; {% endif %}  }, 2000); } } </script>
{% endmacro %}
{# ----- End Copy content ----- #}

{# --- Clock Field -- #}
{% macro clock(options) %}
    <div class="digital-clock"><div class="week">{% for day in options.days %}<div>{{ day }}</div>{% endfor %}</div><div class="time"><div class="hour">00</div><div class="dot">:</div><div class="min">00</div><div class="dot">:</div><div class="sec">00</div></div><div class="date"></div></div><script>function updateClock() {const now = new Date();const hours = now.getHours().toString().padStart(2, '0');const minutes = now.getMinutes().toString().padStart(2, '0');const seconds = now.getSeconds().toString().padStart(2, '0');const day = now.getDay();const days = {{ options.days | json_encode | raw }};document.querySelectorAll('.week div').forEach((el, index) => {el.textContent = days[index];el.classList.toggle('active', index === day);});const lang = '{{ options.lang }}' || 'en-GB';const options = { day: 'numeric', month: 'long', year: 'numeric' };const formattedDate = now.toLocaleDateString(lang, options);document.querySelector('.hour').textContent = hours;document.querySelector('.min').textContent = minutes;document.querySelector('.sec').textContent = seconds;document.querySelector('.date').textContent = formattedDate;}updateClock();setInterval(updateClock, 1000);</script>
{% endmacro %}
{# --- End Clock Field -- #}

{# --- Calendar Field -- #}
{% macro calendar(options) %}
    <div id="calendar"></div><script>function generateCalendar(monthOffset = 0) {const calendar = document.getElementById('calendar');const now = new Date();let currentMonth = now.getMonth();let currentYear = now.getFullYear();let totalMonths = currentYear * 12 + currentMonth + monthOffset;let year = Math.floor(totalMonths / 12);let month = totalMonths % 12;const jsDay = new Date(year, month, 1).getDay();const firstDay = (jsDay + 6) % 7;const lastDate = new Date(year, month + 1, 0).getDate();const lang = '{{ options.lang }}' || 'en';const monthNamesArray = [];for (let i = 0; i < 12; i++) {const date = new Date(year, i, 1);monthNamesArray.push(new Intl.DateTimeFormat(lang, { month: 'long' }).format(date).toUpperCase());}const dayNamesArray = [];for (let i = 0; i < 7; i++) {const date = new Date(1970, 0, 5 + i);dayNamesArray.push(new Intl.DateTimeFormat(lang, { weekday: 'short' }).format(date).toUpperCase());}let calendarHTML = `<div class="calendar-header"><button onclick="generateCalendar(${monthOffset - 1})"><i class="bi bi-arrow-left"></i></button><span>${monthNamesArray[month]} ${year}</span><button onclick="generateCalendar(${monthOffset + 1})"><i class="bi bi-arrow-right"></i></button></div>`;calendarHTML += '<div class="calendar-body">';dayNamesArray.forEach(day => {calendarHTML += `<div class="calendar-day-name">${day}</div>`;});for (let i = 0; i < firstDay; i++) {calendarHTML += '<div class="calendar-day empty"></div>';}for (let date = 1; date <= lastDate; date++) {const isToday = date === now.getDate() &&month === now.getMonth() &&year === now.getFullYear();const todayClass = isToday ? 'today' : '';calendarHTML += `<div class="calendar-day ${todayClass}">${date}</div>`;}calendarHTML += '</div>';calendar.innerHTML = calendarHTML;}document.addEventListener('DOMContentLoaded', () => generateCalendar());</script>
{% endmacro %}
{# --- End Calendar Field -- #}

{# --- Progress Field -- #}
{% macro progressMeter(options) %}
    <div class="gauge-container"><div class="gauge" id="gauge" data-progress="{{ options.indicator }}"><span id="percentage">0%</span></div></div>
{% endmacro %}
{# --- End Progress Field -- #}

{% macro ollamaChatBot(options) %}
    <script>
        (function () {
            const conversationId = '{{ options.conversationId }}';
            const textareaId = '{{ options.textareaId }}';
            const buttonId = '{{ options.buttonId }}';
            const statusIcon = document.getElementById('statusIcon'); // icône du bouton de soumission
            const loadingIcon = 'bi bi-hourglass';  // Icône de réflexion
            const processingIcon = 'bi bi-arrow-repeat';  // Icône pendant le traitement
    
            const model = '{{ options.model | default("llama3:8b") }}';
            const maxTokens = {{ options.max_tokens | default(3000) }};
            const temperature = {{ options.temperature | default(0.6) }};
    
            function getRecentMessages(maxMessages = 5) {
                const conversation = document.getElementById(conversationId);
                const messages = Array.from(conversation.children);
                return messages.slice(-maxMessages).map(msg => msg.textContent).join('\n');
            }
    
            function estimateTokens(text) {
                return text.split(/\s+/).length + text.split(/[\.,:;\(\)]/).length - 1;
            }
    
            function appendMessage(content, sender = 'system') {
                const conversation = document.getElementById(conversationId);
                const message = document.createElement('div');
                message.style.marginBottom = '8px';
                if (sender === 'user') {
                    message.innerHTML = `<strong>You:</strong> ${content}`;
                    message.style.color = '#0066cc';
                } else if (sender === 'bot') {
                    message.innerHTML = `<strong>Ollama:</strong> ${content}`;
                    message.style.color = '#333';
                } else {
                    message.textContent = content;
                    message.style.color = 'red';
                }
                conversation.appendChild(message);
                conversation.scrollTop = conversation.scrollHeight;
            }
    
            async function readStream(response, onFragment) {
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let result = '';
    
                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;
    
                    const chunk = decoder.decode(value);
                    const lines = chunk.split('\n').filter(line => line.trim() !== '');
    
                    for (const line of lines) {
                        try {
                            const json = JSON.parse(line);
                            if (json.response) {
                                result += json.response;
                                onFragment(json.response);
                            }
                        } catch (e) {
                            console.error('Erreur de parsing JSON dans le flux:', e, 'Ligne:', line);
                        }
                    }
                }
    
                return result;
            }
    
            async function sendToOllama() {
                const textarea = document.getElementById(textareaId);
                const button = document.getElementById(buttonId);
                const prompt = textarea.value.trim();
                if (!prompt) {
                    appendMessage('Veuillez entrer un message.', 'error');
                    return;
                }
    
                appendMessage(prompt, 'user');
                textarea.disabled = true; // Désactive le champ de saisie pendant l'envoi
                button.disabled = true; // Désactive le bouton "Envoyer"
                statusIcon.className = loadingIcon; // Change l'icône en réflexion
    
                const recentMessages = getRecentMessages();
                const fullPrompt = `${recentMessages}\nYou: ${prompt}\nOllama: `;
    
                const conversation = document.getElementById(conversationId);
                const newMessage = document.createElement('div');
                newMessage.innerHTML = '<strong>Ollama:</strong> ';
                newMessage.style.color = '#333';
                conversation.appendChild(newMessage);
                conversation.scrollTop = conversation.scrollHeight;
    
                try {
                    const response = await fetch('http://localhost:11434/api/generate', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            model: model,
                            prompt: fullPrompt,
                            max_tokens: maxTokens,
                            temperature: temperature,
                            stream: true
                        })
                    });
    
                    if (!response.ok) {
                        throw new Error(`Erreur HTTP: ${response.status} ${response.statusText}`);
                    }
    
                    statusIcon.className = processingIcon; // Change l'icône en traitement
    
                    await readStream(response, (fragment) => {
                        newMessage.innerHTML += fragment;
                        conversation.scrollTop = conversation.scrollHeight;
                    });
    
                    textarea.disabled = false; // Réactive le champ de saisie
                    button.disabled = false; // Réactive le bouton "Envoyer"
                    statusIcon.className = 'bi bi-arrow-up-circle-fill'; // Remet l'icône de flèche vers le haut
    
                } catch (error) {
                    console.error('Erreur:', error);
                    appendMessage(`Erreur lors de la communication avec Ollama: ${error.message}`, 'error');
                    textarea.disabled = false;
                    button.disabled = false;
                    statusIcon.className = 'bi bi-arrow-up-circle-fill'; // Remet l'icône par défaut
                }
            }
    
            // Ajout d'un écouteur d'événements pour le bouton et la touche "Enter"
            document.addEventListener('DOMContentLoaded', function () {
                const button = document.getElementById(buttonId);
                if (button) {
                    button.addEventListener('click', sendToOllama);
                } else {
                    console.warn('Bouton non trouvé avec l\'ID:', buttonId);
                }
    
                const textarea = document.getElementById(textareaId);
                textarea.addEventListener('keydown', function(event) {
                    if (event.key === 'Enter') {
                        event.preventDefault(); // Empêche le saut de ligne
                        sendToOllama();
                    }
                });
            });
        })();
    </script>
    {% endmacro %}
    
        