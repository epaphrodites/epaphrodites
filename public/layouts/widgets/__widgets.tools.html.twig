{# --- Recognition -- #}
{% macro recognition(recognitionOptions) %}
    <script> document.addEventListener('DOMContentLoaded', function() { var toggleButton = document.getElementById('{{ recognitionOptions.button is defined and recognitionOptions.button ? recognitionOptions.button }}'); var transcriptionText = document.getElementById('{{ recognitionOptions.field is defined and recognitionOptions.field ? recognitionOptions.field }}');if ('webkitSpeechRecognition' in window) { var recognition = new webkitSpeechRecognition(); var defaultLanguage = window.navigator.language; recognition.lang = defaultLanguage; recognition.continuous = true; recognition.interimResults = true; var isRecording = false; toggleButton.addEventListener('click', function() { if (isRecording) { recognition.stop(); } else { recognition.start(); } }); recognition.onresult = function(event) { var interim_transcript = ''; var final_transcript = ''; for (var i = 0; i < event.results.length; ++i) { if (event.results[i].isFinal) { final_transcript += event.results[i][0].transcript; } else {  interim_transcript += event.results[i][0].transcript; } } transcriptionText.value = final_transcript + interim_transcript; }; recognition.onerror = function(event) { console.error("Speech recognition error:", event.error); }; recognition.onstart = function() { toggleButton.innerHTML = '<i class="{{ recognitionOptions.muteIcon | default('bi bi-mic-mute') }}"></i>'; isRecording = true; toggleButton.classList.add('recording'); }; recognition.onend = function() { toggleButton.innerHTML = '<i class="{{ recognitionOptions.muteIcon | default('bi bi-mic') }}"></i>'; isRecording = false; toggleButton.classList.remove('recording'); };} else { console.error("The SpeechRecognition API is not supported by your browser."); toggleButton.disabled = true; }}); </script>
{% endmacro %}
{# --- End Recognition -- #}

{# ----- Copy content ----- #}
{% macro copy(copyOptions) %}
    <script> async function copyContent() { var textField = document.getElementById("{{ copyOptions.content is defined and copyOptions.content ? copyOptions.content }}"); var copyButton = document.getElementById("{{ copyOptions.button is defined and copyOptions.button ? copyOptions.button }}"); if (!textField) { console.error("The textToCopy element was not found."); return; } if (!copyButton) { console.error("The copyButton element was not found."); return; } try { await navigator.clipboard.writeText(textField.value); {% if copyOptions.iconFinal is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconFinal }}'></i> {{ copyOptions.final }}"; {% else %} copyButton.textContent = "{{ copyOptions.final | default('Copied!') }}"; {% endif %} setTimeout(function() { {% if copyOptions.iconInit is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconInit }}'></i> {{ copyOptions.init }}"; {% else %}  copyButton.textContent = "{{ copyOptions.init | default('Copy text') }}"; {% endif %} }, 2000); } catch (err) { console.error("Failed to copy text: ", err); copyButton.textContent = "Failed to copy text."; setTimeout(function() { {% if copyOptions.iconInit is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconInit }}'></i> {{ copyOptions.init }}"; {% else %} copyButton.textContent = "{{ copyOptions.init | default('Copy text') }}"; {% endif %}  }, 2000); } } </script>
{% endmacro %}
{# ----- End Copy content ----- #}

{# --- Clock Field -- #}
{% macro clock(options) %}
    <div class="digital-clock"><div class="week">{% for day in options.days %}<div>{{ day }}</div>{% endfor %}</div><div class="time"><div class="hour">00</div><div class="dot">:</div><div class="min">00</div><div class="dot">:</div><div class="sec">00</div></div><div class="date"></div></div><script>function updateClock() {const now = new Date();const hours = now.getHours().toString().padStart(2, '0');const minutes = now.getMinutes().toString().padStart(2, '0');const seconds = now.getSeconds().toString().padStart(2, '0');const day = now.getDay();const days = {{ options.days | json_encode | raw }};document.querySelectorAll('.week div').forEach((el, index) => {el.textContent = days[index];el.classList.toggle('active', index === day);});const lang = '{{ options.lang }}' || 'en-GB';const options = { day: 'numeric', month: 'long', year: 'numeric' };const formattedDate = now.toLocaleDateString(lang, options);document.querySelector('.hour').textContent = hours;document.querySelector('.min').textContent = minutes;document.querySelector('.sec').textContent = seconds;document.querySelector('.date').textContent = formattedDate;}updateClock();setInterval(updateClock, 1000);</script>
{% endmacro %}
{# --- End Clock Field -- #}

{# --- Calendar Field -- #}
{% macro calendar(options) %}
    <div id="calendar"></div><script>function generateCalendar(monthOffset = 0) {const calendar = document.getElementById('calendar');const now = new Date();let currentMonth = now.getMonth();let currentYear = now.getFullYear();let totalMonths = currentYear * 12 + currentMonth + monthOffset;let year = Math.floor(totalMonths / 12);let month = totalMonths % 12;const jsDay = new Date(year, month, 1).getDay();const firstDay = (jsDay + 6) % 7;const lastDate = new Date(year, month + 1, 0).getDate();const lang = '{{ options.lang }}' || 'en';const monthNamesArray = [];for (let i = 0; i < 12; i++) {const date = new Date(year, i, 1);monthNamesArray.push(new Intl.DateTimeFormat(lang, { month: 'long' }).format(date).toUpperCase());}const dayNamesArray = [];for (let i = 0; i < 7; i++) {const date = new Date(1970, 0, 5 + i);dayNamesArray.push(new Intl.DateTimeFormat(lang, { weekday: 'short' }).format(date).toUpperCase());}let calendarHTML = `<div class="calendar-header"><button onclick="generateCalendar(${monthOffset - 1})"><i class="bi bi-arrow-left"></i></button><span>${monthNamesArray[month]} ${year}</span><button onclick="generateCalendar(${monthOffset + 1})"><i class="bi bi-arrow-right"></i></button></div>`;calendarHTML += '<div class="calendar-body">';dayNamesArray.forEach(day => {calendarHTML += `<div class="calendar-day-name">${day}</div>`;});for (let i = 0; i < firstDay; i++) {calendarHTML += '<div class="calendar-day empty"></div>';}for (let date = 1; date <= lastDate; date++) {const isToday = date === now.getDate() &&month === now.getMonth() &&year === now.getFullYear();const todayClass = isToday ? 'today' : '';calendarHTML += `<div class="calendar-day ${todayClass}">${date}</div>`;}calendarHTML += '</div>';calendar.innerHTML = calendarHTML;}document.addEventListener('DOMContentLoaded', () => generateCalendar());</script>
{% endmacro %}
{# --- End Calendar Field -- #}

{# --- Progress Field -- #}
{% macro progressMeter(options) %}
    <div class="gauge-container"><div class="gauge" id="gauge" data-progress="{{ options.indicator }}"><span id="percentage">0%</span></div></div>
{% endmacro %}
{# --- End Progress Field -- #}

{% macro %}

    <!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interface de Conversation IA</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: Arial, sans-serif;
        }
        .container {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            box-sizing: border-box;
        }
        .conversation {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: #f5f5f5;
            box-sizing: border-box;
        }
        .input-container {
            padding: 10px;
            background-color: #fff;
            border-top: 1px solid #ccc;
            display: flex;
            align-items: center;
            box-sizing: border-box;
            flex-shrink: 0;
        }
        textarea {
            flex: 1;
            resize: none;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
            height: 50px;
            margin-right: 10px;
        }
        button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #0056b3;
        }
        @media (max-width: 600px) {
            textarea {
                height: 40px;
                font-size: 14px;
            }
            button {
                padding: 8px 16px;
                font-size: 14px;
            }
            .input-container {
                padding: 8px;
            }
            .conversation {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="conversation">
            <!-- Messages ajoutés dynamiquement ici -->
        </div>
        <div class="input-container">
            <textarea placeholder="Tapez votre message..."></textarea>
            <button onclick="sendToOllama()">Envoyer</button>
        </div>
    </div>

    <script>
        // Fonction pour récupérer les derniers messages (limite l'historique)
        function getRecentMessages(maxMessages = 5) {
            const conversation = document.querySelector('.conversation');
            const messages = Array.from(conversation.children);
            return messages.slice(-maxMessages).map(msg => msg.textContent).join('\n');
        }

        // Fonction pour estimer le nombre de tokens (approximation)
        function estimateTokens(text) {
            return text.split(/\s+/).length + text.split(/[\.,:;\(\)]/).length - 1;
        }

        // Fonction pour afficher un message dans la conversation
        function appendMessage(content, isError = false) {
            const conversation = document.querySelector('.conversation');
            const message = document.createElement('p');
            message.textContent = content;
            if (isError) {
                message.style.color = 'red';
            }
            conversation.appendChild(message);
            conversation.scrollTop = conversation.scrollHeight; // Auto-scroll
        }

        // Fonction pour gérer le streaming et afficher les fragments en temps réel
        async function readStream(response, onFragment) {
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let result = '';

            while (true) {
                const { done, value } = await reader.read();
                if (done) break;

                const chunk = decoder.decode(value);
                const lines = chunk.split('\n').filter(line => line.trim() !== '');
                for (const line of lines) {
                    try {
                        const json = JSON.parse(line);
                        if (json.response) {
                            result += json.response;
                            onFragment(json.response); // Appeler le callback pour afficher le fragment
                        }
                    } catch (e) {
                        console.error('Erreur de parsing JSON dans le flux:', e, 'Ligne:', line);
                    }
                }
            }

            return result;
        }

        // Fonction pour envoyer la requête à Ollama
        async function sendToOllama() {
            const textarea = document.querySelector('textarea');
            const prompt = textarea.value;
            if (!prompt) {
                appendMessage('Veuillez entrer un message.', true);
                return;
            }

            const recentMessages = getRecentMessages(); // Récupère les 5 derniers messages
            const fullPrompt = `${recentMessages}\nUser: ${prompt}\nAssistant: `;
            console.log('Prompt envoyé:', fullPrompt);
            console.log('Tokens estimés:', estimateTokens(fullPrompt));

            // Créer un élément pour afficher la réponse en streaming
            const conversation = document.querySelector('.conversation');
            const newMessage = document.createElement('p');
            newMessage.textContent = '';
            conversation.appendChild(newMessage);

            try {
                const response = await fetch('http://localhost:11434/api/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        model: 'llama3:8b',
                        prompt: fullPrompt,
                        max_tokens: 3000,
                        temperature: 0.6,
                        stop: ['.', '\n'],
                        stream: true
                    })
                });

                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status} ${response.statusText}`);
                }

                // Afficher les fragments en temps réel
                const responseText = await readStream(response, (fragment) => {
                    newMessage.textContent += fragment;
                    conversation.scrollTop = conversation.scrollHeight; // Auto-scroll
                });

                textarea.value = ''; // Vider le textarea

                // Vérifier si la réponse est inachevée et relancer si nécessaire
                if (!responseText.endsWith('.')) {
                    console.log('Réponse inachevée, relance...');
                    appendMessage('Réponse inachevée, relance en cours...', true);
                    const followUpPrompt = `${fullPrompt}${responseText}\nComplétez la phrase.`;
                    const followUpResponse = await fetch('http://localhost:11434/api/generate', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            model: 'llama3:8b',
                            prompt: followUpPrompt,
                            max_tokens: 3000,
                            temperature: 0.6,
                            stop: ['.', '\n'],
                            stream: true
                        })
                    });

                    const followUpMessage = document.createElement('p');
                    followUpMessage.textContent = '';
                    conversation.appendChild(followUpMessage);

                    await readStream(followUpResponse, (fragment) => {
                        followUpMessage.textContent += fragment;
                        conversation.scrollTop = conversation.scrollHeight;
                    });
                }
            } catch (error) {
                console.error('Erreur:', error);
                appendMessage(`Erreur lors de la communication avec Ollama: ${error.message}`, true);
            }
        }
    </script>
</body>
</html>
{% endmacro %}