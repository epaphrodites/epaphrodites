{% macro send_ajax_request(ajaxOptions) %}
    <script> $(document).ready(function() { const formSelector = "{{ ajaxOptions.form | default('') | escape('js') }}"; const submitSelector = "{{ ajaxOptions.submit | default('') | escape('js') }}"; const messageSelector = "{{ ajaxOptions.msg | escape('js') }}"; $(document).on('submit', formSelector, function(event) { event.preventDefault(); sendAjaxRequest(); }); $(document).on('click', submitSelector, function() { sendAjaxRequest(); }); $(document).on('keypress', formSelector, function(event) { if (event.which === 13) { event.preventDefault(); sendAjaxRequest();  }  }); function sendAjaxRequest() { var param = {}; {% for value in ajaxOptions.value %} var escapedValue = $("#{{ value | escape('js') }}").val(); param["{{ value | escape('js') }}"] = escapedValue ? escapedValue : ''; {% endfor %} $.ajax({ url: "{{ __path(ajaxOptions.url) | default('') | escape('js') }}", type: "{{ ajaxOptions.method | default('POST') | escape('js') }}", data: param, success: function(response) { $(messageSelector).html(response); var fieldsToReset = Object.keys(param).map(function(key) { return '#' + key; }); fieldsToReset.forEach(function(field) { $(field).val(''); }); }, error: function(xhr, status, error) { $(messageSelector).html("An error occurred while submitting the form."); console.error('AJAX Error: ', error); } }); } }); </script>
{% endmacro %}

{% macro get_ajax_request(ajaxOptions) %}
    <script> function getAjaxDatas() { const messageSelector = "{{ ajaxOptions.msg | default('#epaphrodites') | raw }}"; const type = "{{ ajaxOptions.type | default('json') | escape('js') }}"; $.ajax({ url: "{{ __path(ajaxOptions.url) | default('') | raw }}", method: "{{ ajaxOptions.method | default('POST') | raw }}", dataType: type, success: function(response) { switch (type) { case 'html': $(messageSelector).html(response); break; case 'json': $(messageSelector).text(JSON.stringify(response)); break; default: $(messageSelector).text(response); } }, error: function(xhr, status, error) { $(messageSelector).text("An error occurred"); console.error("Error: ", error); } }); } $(document).ready(function() { getAjaxDatas(); {% if ajaxOptions.time is defined %} const refreshInterval = {{ ajaxOptions.time | default(5000) | raw }}; setInterval(getAjaxDatas, refreshInterval); {% endif %} }); </script>
{% endmacro %}

{% macro get_axios_request(axiosOptions) %}
    <script> 
        function getAxiosDatas() { const messageSelector = "{{ axiosOptions.msg | default('#epaphrodites') | raw }}"; const type = "{{ axiosOptions.type | default('json') | escape('js') }}"; axios({ url: "{{ __path(axiosOptions.url) | default('') | raw }}", method: "{{ axiosOptions.method | default('POST') | raw }}", responseType: type }) .then(response => { switch (type) { case 'html': $(messageSelector).html(response.data); break; case 'json': $(messageSelector).text(JSON.stringify(response.data)); break; default: $(messageSelector).text(response.data); } }) .catch(error => { $(messageSelector).text("An error occurred"); console.error("Error: ", error); }); } $(document).ready(function() { getAxiosDatas(); {% if axiosOptions.time is defined %} const refreshInterval = {{ axiosOptions.time | default(5000) | raw }}; setInterval(getaxiosDatas, refreshInterval); {% endif %} });
    </script>
{% endmacro %}



{% macro send_streaming_request(ajaxOptions) %}
    <script>
    $(document).ready(function() {
        const formSelector = "{{ ajaxOptions.form | default('') | escape('js') }}";
        const submitSelector = "{{ ajaxOptions.submit | default('') | escape('js') }}";
        const messageSelector = "{{ ajaxOptions.msg | escape('js') }}";
    
        $(document).on('submit', formSelector, function(event) {
            event.preventDefault();
            sendStreamingRequest();
        });
    
        $(document).on('click', submitSelector, function() {
            sendStreamingRequest();
        });
    
        $(document).on('keypress', formSelector, function(event) {
            if (event.which === 13) {
                event.preventDefault();
                sendStreamingRequest();
            }
        });
    
        function sendStreamingRequest() {
            var param = {};
            {% for value in ajaxOptions.value %}
            var escapedValue = $("#{{ value | escape('js') }}").val();
            param["{{ value | escape('js') }}"] = escapedValue ? escapedValue : '';
            {% endfor %}
    
            const url = "{{ __path(ajaxOptions.url) | default('') | escape('js') }}";
            const method = "{{ ajaxOptions.method | default('POST') | escape('js') }}";
            const xhr = new XMLHttpRequest();
            const messageElement = document.querySelector(messageSelector);
    
            const questionKey = Object.keys(param)[0];
            const questionText = param[questionKey];
    
            const userMsg = document.createElement("div");
            userMsg.textContent = "you : " + questionText;
            messageElement.appendChild(userMsg);
    
            const responseContainer = document.createElement("div");
            responseContainer.textContent = "stream : ";
            messageElement.appendChild(responseContainer);
    
            let buffer = '';
            let lastIndex = 0;
            let isTyping = false;
    
            function typeNextChar() {
                if (buffer.length > 0) {
                    const char = buffer.charAt(0);
                    responseContainer.textContent += char;
                    buffer = buffer.substring(1);
                    setTimeout(typeNextChar, 15);
                } else {
                    isTyping = false;
                }
            }
    
            xhr.open(method, url, true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    
            xhr.onprogress = function() {
                const newText = xhr.responseText.substring(lastIndex);
                buffer += newText;
                lastIndex = xhr.responseText.length;
    
                if (!isTyping && buffer.length > 0) {
                    isTyping = true;
                    typeNextChar();
                }
            };
    
            xhr.onload = function() {
                if (xhr.status === 200) {
                    for (let key in param) {
                        const el = document.getElementById(key);
                        if (el) el.value = '';
                    }
                } else {
                    const errorMsg = document.createElement("div");
                    errorMsg.textContent = "stream : Une erreur est survenue.";
                    messageElement.appendChild(errorMsg);
                }
            };
    
            xhr.onerror = function() {
                const errorMsg = document.createElement("div");
                errorMsg.textContent = "stream : Erreur de communication avec le serveur.";
                messageElement.appendChild(errorMsg);
            };
    
            const urlEncodedData = Object.keys(param)
                .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(param[k]))
                .join('&');
    
            xhr.send(urlEncodedData);
        }
    });
    </script>
    {% endmacro %}
    
    