{% macro send_ajax_request(ajaxOptions) %}
    <script> $(document).ready(function() { const formSelector = "{{ ajaxOptions.form | default('') | escape('js') }}"; const submitSelector = "{{ ajaxOptions.submit | default('') | escape('js') }}"; const messageSelector = "{{ ajaxOptions.msg | escape('js') }}"; $(document).on('submit', formSelector, function(event) { event.preventDefault(); sendAjaxRequest(); }); $(document).on('click', submitSelector, function() { sendAjaxRequest(); }); $(document).on('keypress', formSelector, function(event) { if (event.which === 13) { event.preventDefault(); sendAjaxRequest();  }  }); function sendAjaxRequest() { var param = {}; {% for value in ajaxOptions.value %} var escapedValue = $("#{{ value | escape('js') }}").val(); param["{{ value | escape('js') }}"] = escapedValue ? escapedValue : ''; {% endfor %} $.ajax({ url: "{{ __path(ajaxOptions.url) | default('') | escape('js') }}", type: "{{ ajaxOptions.method | default('POST') | escape('js') }}", data: param, success: function(response) { $(messageSelector).html(response); var fieldsToReset = Object.keys(param).map(function(key) { return '#' + key; }); fieldsToReset.forEach(function(field) { $(field).val(''); }); }, error: function(xhr, status, error) { $(messageSelector).html("An error occurred while submitting the form."); console.error('AJAX Error: ', error); } }); } }); </script>
{% endmacro %}

{% macro get_ajax_request(ajaxOptions) %}
    <script> function getAjaxDatas() { const messageSelector = "{{ ajaxOptions.msg | default('#epaphrodites') | raw }}"; const type = "{{ ajaxOptions.type | default('json') | escape('js') }}"; $.ajax({ url: "{{ __path(ajaxOptions.url) | default('') | raw }}", method: "{{ ajaxOptions.method | default('POST') | raw }}", dataType: type, success: function(response) { switch (type) { case 'html': $(messageSelector).html(response); break; case 'json': $(messageSelector).text(JSON.stringify(response)); break; default: $(messageSelector).text(response); } }, error: function(xhr, status, error) { $(messageSelector).text("An error occurred"); console.error("Error: ", error); } }); } $(document).ready(function() { getAjaxDatas(); {% if ajaxOptions.time is defined %} const refreshInterval = {{ ajaxOptions.time | default(5000) | raw }}; setInterval(getAjaxDatas, refreshInterval); {% endif %} }); </script>
{% endmacro %}

{% macro get_axios_request(axiosOptions) %}
    <script> 
        function getAxiosDatas() { const messageSelector = "{{ axiosOptions.msg | default('#epaphrodites') | raw }}"; const type = "{{ axiosOptions.type | default('json') | escape('js') }}"; axios({ url: "{{ __path(axiosOptions.url) | default('') | raw }}", method: "{{ axiosOptions.method | default('POST') | raw }}", responseType: type }) .then(response => { switch (type) { case 'html': $(messageSelector).html(response.data); break; case 'json': $(messageSelector).text(JSON.stringify(response.data)); break; default: $(messageSelector).text(response.data); } }) .catch(error => { $(messageSelector).text("An error occurred"); console.error("Error: ", error); }); } $(document).ready(function() { getAxiosDatas(); {% if axiosOptions.time is defined %} const refreshInterval = {{ axiosOptions.time | default(5000) | raw }}; setInterval(getaxiosDatas, refreshInterval); {% endif %} });
    </script>
{% endmacro %}

{% macro send_streaming_request(ajaxOptions) %}
    <script>
        $(document).ready(function() {
            const formSelector = "{{ ajaxOptions.form | default('') | escape('js') }}";
            const submitSelector = "{{ ajaxOptions.submit | default('') | escape('js') }}";
            const messageSelector = "{{ ajaxOptions.msg | escape('js') }}";

            $(document).on('submit', formSelector, function(event) {
                event.preventDefault();
                sendStreamingRequest();
            });

            $(document).on('click', submitSelector, function() {
                sendStreamingRequest();
            });

            $(document).on('keypress', formSelector, function(event) {
                if (event.which === 13) {
                    event.preventDefault();
                    sendStreamingRequest();
                }
            });

            async function sendStreamingRequest() {
                var param = {};
                {% for value in ajaxOptions.value %}
                    var escapedValue = $("#{{ value | escape('js') }}").val();
                    param["{{ value | escape('js') }}"] = escapedValue ? escapedValue : '';
                {% endfor %}

                const queryString = Object.keys(param)
                    .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(param[key]))
                    .join('&');

                $(messageSelector).html('');

                const url = "{{ __path(ajaxOptions.url) | default('') | escape('js') }}" + (queryString ? '?' + queryString : '');
                const response = await fetch(url, {
                    headers: { 'Accept': 'text/plain' }
                });

                const reader = response.body.getReader();
                const decoder = new TextDecoder();

                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;
                    const chunk = decoder.decode(value, { stream: true });
                    $(messageSelector).append(chunk.replace(/\n/g, '<br>'));
                }

                var fieldsToReset = Object.keys(param).map(function(key) {
                    return '#' + key;
                });
                fieldsToReset.forEach(function(field) {
                    $(field).val('');
                });
            }
        });
    </script>
{% endmacro %}