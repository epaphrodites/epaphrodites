{% macro send_ajax_request(ajaxOptions) %}
    <script> $(document).ready(function() { const formSelector = "{{ ajaxOptions.form | default('') | escape('js') }}"; const submitSelector = "{{ ajaxOptions.submit | default('') | escape('js') }}"; const messageSelector = "{{ ajaxOptions.msg | escape('js') }}"; $(document).on('submit', formSelector, function(event) { event.preventDefault(); sendAjaxRequest(); }); $(document).on('click', submitSelector, function() { sendAjaxRequest(); }); $(document).on('keypress', formSelector, function(event) { if (event.which === 13) { event.preventDefault(); sendAjaxRequest();  }  }); function sendAjaxRequest() { var param = {}; {% for value in ajaxOptions.value %} var escapedValue = $("#{{ value | escape('js') }}").val(); param["{{ value | escape('js') }}"] = escapedValue ? escapedValue : ''; {% endfor %} $.ajax({ url: "{{ __path(ajaxOptions.url) | default('') | escape('js') }}", type: "{{ ajaxOptions.method | default('POST') | escape('js') }}", data: param, success: function(response) { $(messageSelector).html(response); var fieldsToReset = Object.keys(param).map(function(key) { return '#' + key; }); fieldsToReset.forEach(function(field) { $(field).val(''); }); }, error: function(xhr, status, error) { $(messageSelector).html("An error occurred while submitting the form."); console.error('AJAX Error: ', error); } }); } }); </script>
{% endmacro %}


{% macro get_ajax_request(ajaxOptions) %}
    <script> function getAjaxDatas() { const messageSelector = "{{ ajaxOptions.msg | default('#epaphrodites') | raw }}"; const type = "{{ ajaxOptions.type | default('json') | escape('js') }}"; $.ajax({ url: "{{ __path(ajaxOptions.url) | default('') | raw }}", method: "{{ ajaxOptions.method | default('POST') | raw }}", dataType: type, success: function(response) { switch (type) { case 'html': $(messageSelector).html(response); break; case 'json': $(messageSelector).text(JSON.stringify(response)); break; default: $(messageSelector).text(response); } }, error: function(xhr, status, error) { $(messageSelector).text("An error occurred"); console.error("Error: ", error); } }); } $(document).ready(function() { getAjaxDatas(); {% if ajaxOptions.time is defined %} const refreshInterval = {{ ajaxOptions.time | default(5000) | raw }}; setInterval(getAjaxDatas, refreshInterval); {% endif %} }); </script>
{% endmacro %}

{% macro get_axios_request(axiosOptions) %}
    <script> 
        function getAxiosDatas() { const messageSelector = "{{ axiosOptions.msg | default('#epaphrodites') | raw }}"; const type = "{{ axiosOptions.type | default('json') | escape('js') }}"; axios({ url: "{{ __path(axiosOptions.url) | default('') | raw }}", method: "{{ axiosOptions.method | default('POST') | raw }}", responseType: type }) .then(response => { switch (type) { case 'html': $(messageSelector).html(response.data); break; case 'json': $(messageSelector).text(JSON.stringify(response.data)); break; default: $(messageSelector).text(response.data); } }) .catch(error => { $(messageSelector).text("An error occurred"); console.error("Error: ", error); }); } $(document).ready(function() { getAxiosDatas(); {% if axiosOptions.time is defined %} const refreshInterval = {{ axiosOptions.time | default(5000) | raw }}; setInterval(getaxiosDatas, refreshInterval); {% endif %} });
    </script>
{% endmacro %}



{% macro send_ajax_stream_request(ajaxOptions) %}
    <script src="{{ __js('markdown/marked.min') }}"></script>
    <script>
        $(document).ready(function () {
            const formSelector = "{{ ajaxOptions.form | default('') | escape('js') }}";
            const submitSelector = "{{ ajaxOptions.submit | default('') | escape('js') }}";
            const messageSelector = "{{ ajaxOptions.msg | escape('js') }}";
            const iconTargetSelector = "{{ ajaxOptions.iconTarget | default('') | escape('js') }}";

            const loadingIconClass = "{{ ajaxOptions.loadingIcon | default('bi-hourglass-split') | escape('js') }}";
            const thinkingIconClass = "{{ ajaxOptions.thinkingIcon | default('bi-chat-dots') | escape('js') }}";
            const workingIconClass = "{{ ajaxOptions.workingIcon | default('bi-cpu') | escape('js') }}";

            let originalIconClass = '';
            let buttonTextBackup = '';
            let $submitButton = $(submitSelector);

            if (iconTargetSelector && $(iconTargetSelector).length) {
                originalIconClass = $(iconTargetSelector).attr('class');
            }

            function updateIcon(iconClass, effectClass = '') {
                if (iconTargetSelector && $(iconTargetSelector).length) {
                    const $icon = $(iconTargetSelector);
                    $icon.removeClass().addClass('bi ' + iconClass);
                    if (effectClass) {
                        $icon.addClass(effectClass);
                    }
                }
            }

            function restoreIcon() {
                if (iconTargetSelector && $(iconTargetSelector).length) {
                    $(iconTargetSelector).attr('class', originalIconClass);
                }
            }

            function hideButtonText() {
                const $btn = $submitButton;
                if ($btn.length) {
                    buttonTextBackup = $btn.text().trim();
                    $btn.contents().filter(function () {
                        return this.nodeType === 3;
                    }).remove();
                }
            }

            function restoreButtonText() {
                const $btn = $submitButton;
                if ($btn.length && buttonTextBackup) {
                    $btn.append(' ' + buttonTextBackup);
                }
            }

            function disableInputs(inputs) {
                inputs.forEach(function (id) {
                    $("#" + id).prop('disabled', true).addClass('disabled');
                });
            }

            function enableInputs(inputs) {
                inputs.forEach(function (id) {
                    $("#" + id).prop('disabled', false).removeClass('disabled');
                });
            }

            let isStreaming = false;

            function sendAjaxRequest() {
                if (isStreaming) return;

                isStreaming = true;
                hideButtonText();
                updateIcon(loadingIconClass, 'spin-animation');

                const param = {};
                const inputIds = [];
                {% for value in ajaxOptions.value %}
                const inputId = "{{ value | escape('js') }}";
                const inputValue = $("#" + inputId).val();
                param[inputId] = inputValue ? inputValue : '';
                inputIds.push(inputId);
                {% endfor %}

                disableInputs(inputIds);

                const xhr = new XMLHttpRequest();
                xhr.open("{{ ajaxOptions.method | default('POST') | escape('js') }}", "{{ __path(ajaxOptions.url) | escape('js') }}", true);
                xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");

                let responseText = '';
                const $responseBlock = $('<div class="response-block"></div>');
                $(messageSelector).append($responseBlock);

                let renderTimeout;
                let markdownBuffer = '';
                
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === XMLHttpRequest.LOADING) {
                        updateIcon(thinkingIconClass, 'pulse-animation');
                        const newText = xhr.responseText.substring(responseText.length);
                        responseText = xhr.responseText;
                        markdownBuffer += newText;

                        if (renderTimeout) clearTimeout(renderTimeout);

                        renderTimeout = setTimeout(() => {
                            const parsed = marked.parse(markdownBuffer);
                            $responseBlock.html(parsed);
                        }, 150);
                    }

                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        updateIcon(workingIconClass);
                        isStreaming = false;

                        Object.keys(param).forEach(function (key) {
                            $("#" + key).val('');
                        });

                        enableInputs(inputIds);

                        setTimeout(() => {
                            restoreIcon();
                            restoreButtonText();
                        }, 1000);
                    }
                };

                xhr.send(new URLSearchParams(param));
            }

            $(document).on('submit', formSelector, function (event) {
                event.preventDefault();
                sendAjaxRequest();
            });

            $(document).on('click', submitSelector, function () {
                sendAjaxRequest();
            });

            $(document).on('keypress', formSelector, function (event) {
                if (event.which === 13) {
                    event.preventDefault();
                    sendAjaxRequest();
                }
            });
        });
    </script>

    <style>
        .bi {
            font-size: 1.2rem;
            display: inline-block;
            vertical-align: middle;
        }

        .spin-animation {
            animation: spin360 1s linear infinite;
        }

        .pulse-animation {
            animation: pulse 1s ease-in-out infinite;
        }

        @keyframes spin360 {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.3); }
            100% { transform: scale(1); }
        }

        .response-block {
            margin-top: 10px;
        }
    </style>
{% endmacro %}

