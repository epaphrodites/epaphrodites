# =============== FAISS Index Generator for RAG Chatbot =================
# Supports Windows, MacOS, Ubuntu, Debian, and other Linux distributions.
# Author: Y'srael Aim√© N'dri
# License: MIT
# This script automates the process of generating FAISS vector indexes for
# RAG (Retrieval-Augmented Generation) chatbot systems. It handles the creation
# of embeddings from text documents, builds FAISS indexes, and saves metadata.
# It also includes dependency checking, error handling, and user-friendly 
# output messages.
# The script is designed to be run from the command line and requires
# appropriate permissions to read and write to the specified directories.
# ============================================================================= #

import os
import sys
import argparse
import subprocess
from pathlib import Path
from importlib.metadata import distributions

def check_dependencies():
    """Check that necessary dependencies are installed"""
    required_packages = [
        "faiss-cpu",
        "numpy",
        "sentence-transformers",
        "tqdm"
    ]
    
    try:
        
        installed = {dist.metadata['Name'].lower() for dist in distributions()}
        missing = [pkg for pkg in required_packages if pkg.lower() not in installed]
        
        if missing:
            print(f"Missing dependencies: {', '.join(missing)}")
            install = input("Do you want to install the missing packages? (y/n): ")
            if install.lower() == 'y':
                subprocess.check_call([sys.executable, "-m", "pip", "install"] + missing)
            else:
                print("Installation cancelled. Dependencies must be installed to continue.")
                sys.exit(1)
    except Exception as e:
        print(f"Error while checking dependencies: {e}")
        sys.exit(1)

def setup_directories(args):

    script_path = Path(args.script_path).resolve()
    
    if not script_path.exists():
        print(f"Error: The script {script_path} does not exist.")
        sys.exit(1)
    
    base_dir = script_path.parent
    
    if args.input_dir:
        input_dir = Path(args.input_dir).resolve()
    else:
        input_dir = base_dir.parent.parent.parent.parent / "static" / "docs" / "base-data"
    
    if args.output_dir:
        output_dir = Path(args.output_dir).resolve()
    else:
        output_dir = base_dir.parent.parent.parent / "database" / "datas" / "vector-data"
    
    if not input_dir.exists():
        print(f"Input directory {input_dir} does not exist.")
        create = input("Do you want to create it? (y/n): ")
        if create.lower() == 'y':
            input_dir.mkdir(parents=True, exist_ok=True)
            print(f"Directory created: {input_dir}")
            print(f"Don't forget to place your text files (.txt) before starting indexing!")
        else:
            print("Operation cancelled.")
            sys.exit(1)
    
    output_dir.mkdir(parents=True, exist_ok=True)
    
    return script_path, input_dir, output_dir

def run_script(script_path, input_dir, output_dir):
    """Run the trainRagFaissModel.py script"""
    env = os.environ.copy()
    
    env["TEXT_DIR"] = str(input_dir)
    env["DATA_DIR"] = str(output_dir)
    
    try:
        print(f"\nüöÄ Starting FAISS indexing.......................................................‚úÖ")
        print(f"üìÇ Input directory...............................................................‚úÖ")
        print(f"üìÇ Output directory..............................................................‚úÖ\n")
        
        # Execute the Python script
        subprocess.run(
            [sys.executable, str(script_path)],
            env=env,
            check=True
        )
    
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Error while running script: {e}")
        sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run the FAISS indexing script for RAG chatbot")
    parser.add_argument(
        "-i", "--index", 
        action="store_true", 
        required=True,
        help="Required flag to launch indexing"
    )
    parser.add_argument(
        "--script-path", 
        default="bin/epaphrodites/chatBot/ragFaissModel/lunchTrainRagFaissModel.py",
        help="Path to lunchTrainRagFaissModel.py script (default: bin/epaphrodites/chatBot/ragFaissModel/lunchTrainRagFaissModel.py)"
    )
    parser.add_argument(
        "--input-dir", 
        help="Directory containing text files to index"
    )
    parser.add_argument(
        "--output-dir", 
        help="Directory where to save FAISS index and metadata"
    )
    parser.add_argument(
        "--model", 
        help="Embedding model to use (default: all-MiniLM-L6-v2)"
    )
    
    args = parser.parse_args()
    
    check_dependencies()
    
    script_path, input_dir, output_dir = setup_directories(args)
    
    run_script(script_path, input_dir, output_dir)